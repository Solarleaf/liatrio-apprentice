name: Apprentice GitHub Actions

on:
  push:
    branches:
      - "GitHub"
      - "Kubernetes"
      - "Docker"
      - "Presentation"
      - "Version"
  pull_request:
    branches: [main]

# Prevent Multiple Actions from happening at once on the same branch.
# This does not stop Pull Requests from running at the same time as push.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
# group: ci-${{ github.ref }}

env:
  IMAGE_NAME: liatrio-api
  DOCKER_REPO: apptemp/liatrio
  PORT: 80

jobs:
  liatriotests: # Name Required for passing the pull request checks
    # Security scan wanted these labelled
    permissions:
      contents: read
      packages: read
    env:
      DEPLOY_ENV: ${{ github.event_name == 'pull_request' && 'staging' || 'dev' }}
    # Static Analsysis phase. Can't use DEPLOY_ENV from above since that happens after Static Analysis
    environment: ${{ github.event_name == 'pull_request' && 'staging' || 'dev' }}
    # build:
    # Runner using version
    runs-on: ubuntu-24.04

    timeout-minutes: 5
    outputs:
      IMAGE_TAG: ${{ steps.expose-image-tag.outputs.IMAGE_TAG }}
    steps:
      # checkout@v4 using Sha 3-13-25
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: ⭐ Build Docker Image
        run: docker build -t $IMAGE_NAME .

      - name: ⭐ Run Docker
        run: docker run -d -p $PORT:$PORT $IMAGE_NAME

      # liatrio/github-actions/apprentice-action@v1.0.0 3-13-25
      - name: ⭐ Run Liatrio 6 tests
        uses: liatrio/github-actions/apprentice-action@0b41561cca6822cc8d880fe0e49e7807a41fdf91

      - name: Log in to Docker Hub
        # If success just in case an if: failure() is ever used
        # Want to make sure that everything worked before starting the upload process
        if: success()
        # uses: docker/login-action@v2 3-13-25
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: ⭐ Set Image Tag as Commit Sha
        id: expose-image-tag
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_OUTPUT
      # Creates a latest and a time stamped version making manual rollbacks easier if needed
      - name: ⭐ Tag Docker Image
        if: success()
        run: |
          docker tag $IMAGE_NAME $DOCKER_REPO:latest
          docker tag $IMAGE_NAME $DOCKER_REPO:${IMAGE_TAG}

      - name: ⭐ Push Docker Image
        if: success()
        run: |
          docker push $DOCKER_REPO:latest
          docker push $DOCKER_REPO:${IMAGE_TAG}
  # Per Best Practices this would be a separate file. To avoid Screen swaps keeping it in same file
  #  on:
  #   workflow_run:
  #     workflows: ["Apprentice GitHub Actions"]
  #     types:
  #       - completed

  GCloud:
    # build:
    needs: liatriotests
    # if: false

    env:
      GKE_CLUSTER: cluster-1
      GKE_REGION: us-central1-a
      IMAGE_TAG: ${{ needs.liatriotests.outputs.IMAGE_TAG }}
      DEPLOY_ENV: ${{ github.event_name == 'pull_request' && 'staging' || 'dev' }}
      BRANCH_NAME: ${{ github.ref_name }}
    # Runner using version
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    # Checks out the Repo code
    permissions:
      contents: read
    steps:
      # checkout@v4 using Sha 3-13-25
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      # - uses: "google-github-actions/auth@v2"
      - uses: "google-github-actions/auth@6fc4af4b145ae7821d527454aa9bd537d1f2dc5f"
        with:
          credentials_json: "${{ secrets.GOGLE_CREDS }}"

      # uses: google-github-actions/setup-gcloud@v2 3-13-25
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@6189d56e4096ee891640bb02ac264be376592d6a

      - name: Check if kubectl is installed
        run: kubectl version --client

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
          echo "export USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> ~/.bashrc
          source ~/.bashrc

      - name: Clusters List
        run: gcloud container clusters list

        # Output used in case this were to be a multi stage
      - name: Check if Cluster Exists
        id: check-cluster
        run: |
          CLUSTER_EXISTS=$(gcloud container clusters list --region $GKE_REGION --filter="name=${GKE_CLUSTER}" --format="value(name)")
          if [[ -z "$CLUSTER_EXISTS" ]]; then
            echo "ERROR: Kubernetes cluster '${GKE_CLUSTER}' not found in region '${GKE_REGION}'"
            echo "CREATE_CLUSTER=false" >> $GITHUB_ENV
            echo "CREATE_CLUSTER=false" >> $GITHUB_OUTPUT
          else
            echo "Cluster '${GKE_CLUSTER}' exists. Proceeding with deployment."
            echo "CREATE_CLUSTER=true" >> $GITHUB_ENV
            echo "CREATE_CLUSTER=true" >> $GITHUB_OUTPUT
          fi

      - name: ⭐ Deploy Cluster
        if: steps.check-cluster.outputs.CREATE_CLUSTER == 'false'
        run: |
          echo "Creating GKE Cluster from k8s/cluster.txt..."
          # gcloud components install beta --quiet # Install beta # IF needed
          chmod +x k8s/cluster.txt  # Ensure it's executable
          bash k8s/cluster.txt --quiet &      # Run the cluster creation command
          echo "Cluster creation started! Running in background, next step is used. This is to prevent timeout"

      - name: Wait for Cluster Readiness
        run: |
          echo "Waiting for cluster to be ready..."
          for ((i=1; i<=10; i++)); do
            STATUS=$(gcloud container clusters describe ${GKE_CLUSTER} --region ${GKE_REGION} --format="value(status)")

            if [[ "$STATUS" == "RUNNING" ]]; then
              echo "Cluster is now RUNNING."
              exit 0
            fi
            if [[ "$STATUS" == "PROVISIONING" ]]; then
              echo "Cluster is (Status: $STATUS). Adding an extra 30 seconds of wait time"
              sleep 30
            fi

            echo "Attempt $i/10: Cluster '${GKE_CLUSTER}' is still not ready... (Status: $STATUS)"
            sleep 30
          done

          echo "Cluster '${GKE_CLUSTER}' did not become READY after 10 attempts. Exiting."
          exit 1

      - name: Get Kubernetes Credentials
        run: gcloud container clusters get-credentials $GKE_CLUSTER --region $GKE_REGION

      - name: ⭐ Print Environment
        run: echo "Deploying to $DEPLOY_ENV"

      - name: ⭐ Establish Namespaces
        run: |
          kubectl apply -f k8s/namespaces.yaml

      - name: Set Kubernetes Context
        run: |
          kubectl config set-context --current --namespace=$DEPLOY_ENV

      - name: ⭐ Deploy Container
        run: |
          echo "${IMAGE_TAG}"
          sed -i "s|\(image: docker.io/${DOCKER_REPO}:\)[^[:space:]]*|\1${IMAGE_TAG}|" k8s/deployment.yaml
          cat k8s/deployment.yaml
          kubectl apply -f k8s/deployment.yaml --namespace=$DEPLOY_ENV

      - name: ⭐ Set Version Tag Based on Branch
        run: |
          # Extract and normalize branch name (only letters)
          BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}" | tr -cd 'a-zA-Z')
          echo "Branch Name: $BRANCH_NAME"

          # Try to fetch the current version dynamically using gh CLI
          CURRENT_VERSION=$(gh variable get "$BRANCH_NAME" --env "$DEPLOY_ENV" --repo $GITHUB_REPOSITORY --json name,value --jq '.value' || echo "")

          if [[ -z "$CURRENT_VERSION" ]]; then
            CURRENT_VERSION="0.0.0"
          fi

          echo "Current Version: $CURRENT_VERSION"

          # Function to increment version (adds 0.0.1)
          increment_version() {
            local version=$1
            IFS='.' read -r major minor patch <<< "$version"  # Extract version numbers
            patch=$((patch + 1))  # Increment patch version
            echo "${major}.${minor}.${patch}"
          }

          # Get new version (incremented)
          NEW_VERSION=$(increment_version "$CURRENT_VERSION")

          # Export version to GitHub Actions
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV

          # Print new version for debugging
          echo "New Version: $NEW_VERSION"

          # Update the GitHub Actions environment variable for the branch with the new version
          gh variable set "$BRANCH_NAME" --body "$NEW_VERSION" --env "$DEPLOY_ENV" --repo $GITHUB_REPOSITORY
        env:
          GH_TOKEN: ${{ secrets.LIAPATS }}

      - name: ⭐ Change-Cause for New Deployment
        run: |
          kubectl annotate deployment liatrio-deployment-api \
            kubernetes.io/change-cause="Deployed: ${NEW_VERSION} from branch: ${BRANCH_NAME} at commit: $GITHUB_SHA" \
            --overwrite -n $DEPLOY_ENV

      - name: ⭐ Label New Deployment
        run: |
          kubectl label deployment liatrio-deployment-api version=${NEW_VERSION} branch=${BRANCH_NAME} commit=${GITHUB_SHA} --overwrite -n $DEPLOY_ENV

  # Per Best Practices this would be a separate file. To avoid Screen swaps keeping it in same file
  #  on:
  #   workflow_run:
  #     workflows: ["GCloud"]
  #     types:
  #       - completed
  Tests:
    # if: false
    needs: GCloud
    env:
      GKE_CLUSTER: cluster-1
      GKE_REGION: us-central1-a
      DEPLOY_ENV: ${{ github.event_name == 'pull_request' && 'staging' || 'dev' }}
    # Runner using version
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    # Checks out the Repo code
    permissions:
      contents: read
    steps:
      # checkout@v4 using Sha 3-13-25
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      # - uses: "google-github-actions/auth@v2"
      - uses: "google-github-actions/auth@6fc4af4b145ae7821d527454aa9bd537d1f2dc5f"
        with:
          credentials_json: "${{ secrets.GOGLE_CREDS }}"

      # uses: google-github-actions/setup-gcloud@v2 3-13-25
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@6189d56e4096ee891640bb02ac264be376592d6a

      - name: Check if kubectl is installed
        run: kubectl version --client

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
          echo "export USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> ~/.bashrc
          source ~/.bashrc

      - name: Clusters List
        run: gcloud container clusters list

        # Output used in case this were to be a multi stage
      - name: Check if Cluster Exists
        id: check-cluster
        run: |
          CLUSTER_EXISTS=$(gcloud container clusters list --region $GKE_REGION --filter="name=${GKE_CLUSTER}" --format="value(name)")
          if [[ -z "$CLUSTER_EXISTS" ]]; then
            echo "ERROR: Kubernetes cluster '${GKE_CLUSTER}' not found in region '${GKE_REGION}'"
            exit 1
          else
            echo "Cluster '${GKE_CLUSTER}' exists. Proceeding with user setup."
          fi

      - name: Get Kubernetes Credentials
        run: gcloud container clusters get-credentials $GKE_CLUSTER --region $GKE_REGION

      - name: Establish Namespaces
        run: |
          kubectl apply -f k8s/namespaces.yaml

      - name: ⭐ Establish Service Account, Binding, & Role
        run: |
          kubectl apply -f k8s/rbac.yaml
      - name: ⭐ Generate Service Account Token & Test
        run: |
          TOKEN=$(kubectl create token github-actions-sa-user -n github-actions)
          echo "::add-mask::$TOKEN"
          if [ -z "$TOKEN" ]; then
            echo "ERROR: Token generation failed!"
            exit 1
          fi
          echo "Checking Deployments using ServiceAccount..."
          echo ""
          echo "Deployments:"
          kubectl --token=$TOKEN get deployment -n dev
          echo ""
          echo "Pods:"
          kubectl --token=$TOKEN get pods -n dev
          echo ""
          echo "Describe Deployment:"
          kubectl --token=$TOKEN describe deployment liatrio-deployment-api -n dev

      - name: ⭐ Auth test
        run: |
          kubectl auth can-i list pods -n dev --as=system:serviceaccount:github-actions:github-actions-sa-user
          kubectl auth can-i list pods -n staging --as=system:serviceaccount:github-actions:github-actions-sa-user
          kubectl auth can-i list pods -n prod --as=system:serviceaccount:github-actions:github-actions-sa-user
          kubectl auth can-i list namespaces -n dev --as=system:serviceaccount:github-actions:github-actions-sa-user
          kubectl auth can-i list namespaces -n staging --as=system:serviceaccount:github-actions:github-actions-sa-user
          kubectl auth can-i list namespaces -n prod --as=system:serviceaccount:github-actions:github-actions-sa-user

      - name: ⭐ Version Control. Change Cause & Deployment Label
        run: |
          kubectl get deployment liatrio-deployment-api -n $DEPLOY_ENV --show-labels
          kubectl rollout history deployment liatrio-deployment-api -n $DEPLOY_ENV

      - name: Horizontal Pod Autoscaler Trigger & Rolling Update
        run: |
          echo "$DEPLOY_ENV"
          kubectl apply -f k8s/hpa.yaml
          kubectl patch deployment liatrio-deployment-api --patch-file k8s/timestamp_patch.yaml -n $DEPLOY_ENV
