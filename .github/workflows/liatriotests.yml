name: Apprentice GitHub Actions

on:
  push:
    branches:
      - "GitHub"
      - "Kubernetes"
      - "Docker"
      - "Presentation"
      - "Version"
      # - "ArgoCD"
  pull_request:
    branches: [main]

# on:
#   workflow_run:
#     workflows: ["Trigger Workflow"]
#     types:
#       - completed

# Prevent Multiple Actions from happening at once on the same branch.
# However, it will cancel newer items. So if you run multiple push it will cancel newer push
# Pull Requests should use the latest though
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

env:
  IMAGE_NAME: liatrio-api
  DOCKER_REPO: apptemp/liatrio
  PORT: 80

jobs:
  liatriotests: # Name Required for passing the pull  request checks
    # if: false
    # Security scan wanted these labelled
    permissions:
      contents: write
      packages: read
    env:
      # Currently just Dev to save resources
      # DEPLOY_ENV: ${{ github.event_name == 'pull_request' && 'staging' || 'dev' }}
      DEPLOY_ENV: ${{ github.event_name == 'pull_request' && 'dev' || 'dev' }}
      BRANCH_NAME: ${{ github.ref_name }}
    # Static Analsysis phase. Can't use DEPLOY_ENV from above since that happens after Static Analysis
    # Currently just Dev to save resources
    # environment: ${{ github.event_name == 'pull_request' && 'staging' || 'dev' }}
    environment: ${{ github.event_name == 'pull_request' && 'dev' || 'dev' }}
    # build:
    # Runner using version
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    outputs:
      NEW_VERSION: ${{ steps.set-version.outputs.NEW_VERSION }}
      BRANCH_NAME: ${{ steps.branch-name.outputs.BRANCH_NAME }}
    steps:
      # checkout@v4 using Sha 3-13-25
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      # - name: Determine Branch Name
      #   id: branch-name
      #   run: |
      #     if [[ "${{ github.event_name }}" == "pull_request" ]]; then
      #       BRANCH_NAME="${{ github.head_ref }}"
      #     else
      #       BRANCH_NAME="${{ github.ref_name }}"
      #     fi
      #     echo "BRANCH_NAME=$BRANCH_NAME" >> "$GITHUB_OUTPUT"
      #     echo "BRANCH_NAME=$BRANCH_NAME" >> "$GITHUB_ENV"
      # - name: Determine Branch Name
      #   id: branch-name
      #   run: |
      #     if [[ "${GITHUB_EVENT_NAME}" == "pull_request" ]]; then
      #       BRANCH_NAME="${GITHUB_HEAD_REF}"
      #     else
      #       BRANCH_NAME="${GITHUB_REF#refs/heads/}"
      #     fi

      #     echo "BRANCH_NAME=$BRANCH_NAME" >> "$GITHUB_ENV"
      #     echo "BRANCH_NAME=$BRANCH_NAME" >> "$GITHUB_OUTPUT"

      - name: ⭐ Build Docker Image
        run: docker build -t $IMAGE_NAME .

      - name: ⭐ Run Docker
        run: docker run -d -p $PORT:$PORT $IMAGE_NAME

      # liatrio/github-actions/apprentice-action@v1.0.0 3-13-25
      - name: ⭐ Run Liatrio 6 tests
        uses: liatrio/github-actions/apprentice-action@0b41561cca6822cc8d880fe0e49e7807a41fdf91

      - name: Log in to Docker Hub
        # If success just in case an if: failure() is ever used
        # Want to make sure that everything worked before starting the upload process
        if: success()
        # uses: docker/login-action@v2 3-13-25
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: ⭐ Set Version Tag Based on Branch
        id: set-version
        run: |
          # Extract and normalize branch name (only letters)
          BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}" | tr -cd 'a-zA-Z')
          echo "Branch Name: $BRANCH_NAME"

          # Try to fetch the current version dynamically using gh CLI
          CURRENT_VERSION=$(gh variable get "$BRANCH_NAME" --env "$DEPLOY_ENV" --repo $GITHUB_REPOSITORY --json name,value --jq '.value' || echo "")

          if [[ -z "$CURRENT_VERSION" ]]; then
            CURRENT_VERSION="0.0.0"
          fi

          echo "Current Version: $CURRENT_VERSION"

          # Function to increment version (adds 0.0.1)
          increment_version() {
            local version=$1
            IFS='.' read -r major minor patch <<< "$version"  # Extract version numbers
            patch=$((patch + 1))  # Increment patch version
            echo "${major}.${minor}.${patch}"
          }

          # Get new version (incremented)
          NEW_VERSION=$(increment_version "$CURRENT_VERSION")

          # Export version to GitHub Actions
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
          echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_OUTPUT

          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV

          # Print new version for debugging
          echo "New Version: $NEW_VERSION"

          # Update the GitHub Actions environment variable for the branch with the new version
          gh variable set "$BRANCH_NAME" --body "$NEW_VERSION" --env "$DEPLOY_ENV" --repo $GITHUB_REPOSITORY
        env:
          GH_TOKEN: ${{ secrets.LIAPATS }}

      # Creates a latest and a time stamped version making manual rollbacks easier if needed
      - name: ⭐ Tag Docker Image
        if: success()
        run: |
          docker tag $IMAGE_NAME $DOCKER_REPO:latest
          docker tag $IMAGE_NAME $DOCKER_REPO:${BRANCH_NAME}${NEW_VERSION}

      - name: ⭐ Push Docker Image
        if: success()
        run: |
          docker push $DOCKER_REPO:latest
          docker push $DOCKER_REPO:${BRANCH_NAME}${NEW_VERSION}

      - name: ⭐ Rename Container
        run: |
          echo "${NEW_VERSION}"
          D_OLD_IMAGE_LINE="image: docker.io/${DOCKER_REPO}:"
          D_NEW_TAG="${BRANCH_NAME}${NEW_VERSION}"
          echo "$D_NEW_TAG"
          # sed -i -E "/name: NEW_VERSION/{n;s/value: \".*\"/value: \"$D_NEW_TAG\"/}" ArgoManifest/deployment.yaml
          sed -i "s|image: docker.io/${DOCKER_REPO}:.*|image: docker.io/${DOCKER_REPO}:${D_NEW_TAG}|" ArgoManifest/deployment.yaml

      - name: ⭐ Update NEW_VERSION in deployment.yaml for Index.js
        run: |
          D_NEW_TAG="${BRANCH_NAME}${NEW_VERSION}"
          echo "$D_NEW_TAG"
          # sed -i "/name: NEW_VERSION/{n;s/value:.*/value: \"$D_NEW_TAG\"/}" ArgoManifest/deployment.yaml
          sed -i -E "/name: NEW_VERSION/{n;s/value: \".*\"/value: \"${D_NEW_TAG}\"/}" ArgoManifest/deployment.yaml
          cat ArgoManifest/deployment.yaml

      - name: ⭐ Commit and Push deployment.yaml change
        env:
          GH_TOKEN: ${{ secrets.ARGO_ADD }}
        run: |
          git config user.name "Auto Deployer"
          git config user.email "1337@supa.com"
          git checkout "${BGITHUB_REF_NAME}"
          git add ArgoManifest/deployment.yaml
          if git diff --cached --quiet; then
            echo "✅ No changes to commit"
          else
            git commit -m "Automated update of deployment.yaml [skip ci]"
            git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/${GITHUB_REPOSITORY}.git
            git push origin HEAD:${GITHUB_REF_NAME}
          fi

  GCloud:
    needs: liatriotests
    # if: false

    env:
      GKE_CLUSTER: cluster-1
      GKE_REGION: us-central1-a
      NEW_VERSION: ${{ needs.liatriotests.outputs.NEW_VERSION }}
      # Currently just Dev to save resources
      DEPLOY_ENV: ${{ github.event_name == 'pull_request' && 'dev' || 'dev' }}
      # DEPLOY_ENV: ${{ github.event_name == 'pull_request' && 'staging' || 'dev' }}
      BRANCH_NAME: ${{ needs.liatriotests.outputs.BRANCH_NAME }}
    # Runner using version
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    # Checks out the Repo code
    permissions:
      contents: read
    steps:
      # checkout@v4 using Sha 3-13-25
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      # - uses: "google-github-actions/auth@v2"
      - uses: "google-github-actions/auth@6fc4af4b145ae7821d527454aa9bd537d1f2dc5f"
        with:
          credentials_json: "${{ secrets.GOGLE_CREDS }}"

      # uses: google-github-actions/setup-gcloud@v2 3-13-25
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@6189d56e4096ee891640bb02ac264be376592d6a

      - name: Check if kubectl is installed
        run: kubectl version --client

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
          echo "export USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> ~/.bashrc
          source ~/.bashrc

      - name: Clusters List
        run: gcloud container clusters list

        # Output used in case this were to be a multi stage
      - name: Check if Cluster Exists
        id: check-cluster
        run: |
          CLUSTER_EXISTS=$(gcloud container clusters list --region $GKE_REGION --filter="name=${GKE_CLUSTER}" --format="value(name)")
          if [[ -z "$CLUSTER_EXISTS" ]]; then
            echo "ERROR: Kubernetes cluster '${GKE_CLUSTER}' not found in region '${GKE_REGION}'"
            echo "CREATE_CLUSTER=false" >> $GITHUB_ENV
            echo "CREATE_CLUSTER=false" >> $GITHUB_OUTPUT
          else
            echo "Cluster '${GKE_CLUSTER}' exists. Proceeding with deployment."
            echo "CREATE_CLUSTER=true" >> $GITHUB_ENV
            echo "CREATE_CLUSTER=true" >> $GITHUB_OUTPUT
          fi

      - name: ⭐ Provision Cluster
        if: steps.check-cluster.outputs.CREATE_CLUSTER == 'false'
        run: |
          echo "Provisioning GKE Cluster from k8s/cluster.txt"
          # gcloud components install beta --quiet # Install beta # IF needed
          chmod +x k8s/cluster.txt  # Ensure it's executable
          bash k8s/cluster.txt --quiet &      # Run the cluster creation command
          echo "Cluster creation started! Running in background, next step is used. This is to prevent timeout"

      - name: Wait for Cluster Readiness
        run: |
          echo "Waiting for cluster to be ready"
          for ((i=1; i<=10; i++)); do
            STATUS=$(gcloud container clusters describe ${GKE_CLUSTER} --region ${GKE_REGION} --format="value(status)")

            if [[ "$STATUS" == "RUNNING" ]]; then
              echo "Cluster is now RUNNING."
              exit 0
            fi
            if [[ "$STATUS" == "PROVISIONING" ]]; then
              echo "Cluster is (Status: $STATUS). Adding an extra 30 seconds of wait time"
              sleep 30
            fi

            echo "Attempt $i/10: Cluster '${GKE_CLUSTER}' is still not ready. (Status: $STATUS)"
            sleep 30
          done

          echo "Cluster '${GKE_CLUSTER}' did not become READY after 10 attempts. Exiting."
          exit 1

      - name: Get Kubernetes Credentials
        run: gcloud container clusters get-credentials $GKE_CLUSTER --region $GKE_REGION

      - name: ⭐ Print Environment
        run: echo "Deploying to $DEPLOY_ENV"

      - name: ArgoCD Install
        run: |
          if ! kubectl get ns argocd &> /dev/null; then
            echo "ArgoCD not found — installing"
            curl -L https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml -o argocd-install.yaml
            kubectl create namespace argocd
            kubectl apply -n argocd -f ArgoSetup/argocd-install.yaml
          else
            echo "✅ ArgoCD already installed — skipping setup."
          fi

      - name: ArgoCD CLI
        run: |
          if ! command -v argocd >/dev/null 2>&1; then
            echo "Argo CD CLI not found — installing"
            curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
            sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
            rm argocd-linux-amd64
            echo "✅ Argo CD CLI installed successfully."
          else
            echo "✅ Argo CD CLI is already installed:"
            argocd version --client || echo "Client version check failed (but CLI is present)"
          fi
      # Namespaces must be run before the container is deployed
      # WIP dev tag since no staging right now
      - name: ⭐ Deploy ArgoCD Appp
        run: |
          kubectl apply -f ArgoSetup/argo-app.yaml

      - name: Argo Login
        run: |
          kubectl rollout status deployment argocd-server -n argocd
          if ! lsof -i :8080 >/dev/null; then
            kubectl port-forward svc/argocd-server -n argocd 8080:443 &
            sleep 5
          fi
          sleep 5  # Give it a moment to start up
          ARGOCD_ADMIN_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret \
            -o jsonpath="{.data.password}" | base64 -d)
          argocd login localhost:8080 --username admin --password "$ARGOCD_ADMIN_PASSWORD" --insecure
          argocd app wait liatrio-argocd-api --operation
          argocd app sync liatrio-argocd-api

      - name: Wait for ArgoCD App Sync
        run: |
          echo "BRANCH_NAME: ${BRANCH_NAME}"
          echo "NEW_VERSION: ${NEW_VERSION}"
          echo "EXPECTED VERSION: ${BRANCH_NAME}${NEW_VERSION}"
          for i in {1..10}; do
            EXTERNAL_IP=$(kubectl get svc liatrio-service-api -n dev -o jsonpath="{.status.loadBalancer.ingress[0].ip}")
            if [[ -z "$EXTERNAL_IP" ]]; then
              echo "Waiting for external IP"
              sleep 10
            else
              echo "::add-mask::$EXTERNAL_IP"
              break
            fi
          done

          if [[ -z "$EXTERNAL_IP" ]]; then
            echo "❌ Failed to get external IP"
            exit 1
          fi

          echo "Curling app at http://$EXTERNAL_IP"

          RESPONSE=$(curl -s "http://$EXTERNAL_IP")

          echo "Full response: $RESPONSE"

          DEPLOYED_VERSION=""
            for attempt in {1..9}; do
              echo "Attempt $attempt to verify deployed version"

              RESPONSE=$(curl -s "http://$EXTERNAL_IP")
              echo "Full response: $RESPONSE"

              DEPLOYED_VERSION=$(echo "$RESPONSE" | jq -r '.version // .NEW_VERSION // empty')

              echo "Comparing expected version ${BRANCH_NAME}${NEW_VERSION} to deployed version ${DEPLOYED_VERSION}"

              if [[ "$DEPLOYED_VERSION" == "${BRANCH_NAME}${NEW_VERSION}" ]]; then
                echo "✅ Version match confirmed: $DEPLOYED_VERSION"
                break
              fi

              echo "❌ Version mismatch (Attempt $attempt). Retrying in 10 seconds"
              sleep 10
            done

            # Final check after retries
            if [[ "$DEPLOYED_VERSION" != "${BRANCH_NAME}${NEW_VERSION}" ]]; then
              echo "❌ Final mismatch after retries!"
              echo "Expected: ${BRANCH_NAME}${NEW_VERSION}"
              echo "Got:      $DEPLOYED_VERSION"
              exit 1
            fi

      # # This needs to run before deployment to establish namespaces
      # - name: ⭐ Establish Namespaces & GitHub actions applies relevant namespace
      #   run: |
      #     echo "Google Actions adds namespace. Branch is dev. Pull request is staging"
      #     kubectl apply -f k8s/namespaces.yaml

      # - name: Set Kubernetes Context
      #   run: |
      #     kubectl config set-context --current --namespace=$DEPLOY_ENV

      # # Namespaces must be run before the container is deployed
      # - name: ⭐ Deploy Container
      #   run: |
      #     kubectl apply -f k8s/deployment.yaml --namespace=$DEPLOY_ENV

      - name: Change-Cause for New Deployment (Shown in Tests)
        run: |
          kubectl annotate deployment liatrio-deployment-api \
            kubernetes.io/change-cause="Deployed: ${NEW_VERSION} from branch: ${BRANCH_NAME} at commit: $GITHUB_SHA" \
            --overwrite -n $DEPLOY_ENV

      - name: Label New Deployment (Shown in Tests)
        run: |
          kubectl label deployment liatrio-deployment-api version=${NEW_VERSION} branch=${BRANCH_NAME} commit=${GITHUB_SHA} --overwrite -n $DEPLOY_ENV

  KubernetesTests:
    # if: false
    needs: GCloud
    env:
      GKE_CLUSTER: cluster-1
      GKE_REGION: us-central1-a
      # Currently just Dev to save resources
      # DEPLOY_ENV: ${{ github.event_name == 'pull_request' && 'staging' || 'dev' }}
      DEPLOY_ENV: ${{ github.event_name == 'pull_request' && 'dev' || 'dev' }}
    # Runner using version
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    # Checks out the Repo code
    permissions:
      contents: read
    steps:
      # checkout@v4 using Sha 3-13-25
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      # - uses: "google-github-actions/auth@v2"
      - uses: "google-github-actions/auth@6fc4af4b145ae7821d527454aa9bd537d1f2dc5f"
        with:
          credentials_json: "${{ secrets.GOGLE_CREDS }}"

      # uses: google-github-actions/setup-gcloud@v2 3-13-25
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@6189d56e4096ee891640bb02ac264be376592d6a

      - name: Check if kubectl is installed
        run: kubectl version --client

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
          echo "export USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> ~/.bashrc
          source ~/.bashrc

      - name: Clusters List
        run: gcloud container clusters list

        # Output used in case this were to be a multi stage
      - name: Check if Cluster Exists
        id: check-cluster
        run: |
          CLUSTER_EXISTS=$(gcloud container clusters list --region $GKE_REGION --filter="name=${GKE_CLUSTER}" --format="value(name)")
          if [[ -z "$CLUSTER_EXISTS" ]]; then
            echo "ERROR: Kubernetes cluster '${GKE_CLUSTER}' not found in region '${GKE_REGION}'"
            exit 1
          else
            echo "Cluster '${GKE_CLUSTER}' exists. Proceeding with user setup."
          fi

      - name: Get Kubernetes Credentials
        run: gcloud container clusters get-credentials $GKE_CLUSTER --region $GKE_REGION

      - name: Establish Namespaces
        run: |
          kubectl apply -f ArgoManifest/namespaces.yaml

      - name: Turn ArgoCD off for HPA
        run: |
          kubectl patch application liatrio-argocd-api -n argocd --type merge -p '{
            "spec": {
              "syncPolicy": null
            }
          }'
          # kubectl scale deployment argocd-server -n argocd --replicas=0
          sleep 5
      # - name: Ignore HPA drift temporarily
      #   run: |
      #     kubectl patch application liatrio-argocd-api -n argocd --type merge -p '{
      #       "spec": {
      #         "ignoreDifferences": [
      #           {
      #             "group": "autoscaling",
      #             "kind": "HorizontalPodAutoscaler",
      #             "name": "liatrio-hpa-api",
      #             "namespace": "dev",
      #             "jsonPointers": ["/spec/metrics"]
      #           }
      #         ]
      #       }
      #     }'

      - name: ⭐ Horizontal Pod Autoscaler To 1% to Trigger All Pods
        run: |
          echo "Patching HPA - This should not trigger a rollout"
          kubectl patch hpa liatrio-hpa-api -n $DEPLOY_ENV --patch-file Tests/hpa_test.yaml
          echo ""
          echo "Horizontal Pod Autoscaler Status. Note: CPU may be unknown as that can take a bit to load after a patch. HPA:"
          kubectl get hpa -n $DEPLOY_ENV
          echo ""
          echo "Current Pods:"
          kubectl get pods -n $DEPLOY_ENV

      - name: Wait for HPA to scale
        run: |
          HPA_NAME=liatrio-hpa-api
          MAX_REPLICAS=$(kubectl get hpa $HPA_NAME -n $DEPLOY_ENV -o jsonpath='{.spec.maxReplicas}')
          echo "Waiting for $HPA_NAME to scale to $MAX_REPLICAS replicas"

          for i in {1..20}; do
            CURRENT_REPLICAS=$(kubectl get deployment liatrio-deployment-api -n $DEPLOY_ENV -o jsonpath='{.status.readyReplicas}')
            echo "Ready replicas: $CURRENT_REPLICAS"

            if [[ "$CURRENT_REPLICAS" == "$MAX_REPLICAS" ]]; then
              echo "$HPA_NAME has reached max replicas ($MAX_REPLICAS)"
              break
            fi

            echo "Waiting ($i/20)"
            sleep 15
          done

          if [[ "$CURRENT_REPLICAS" != "$MAX_REPLICAS" ]]; then
            echo "Timeout: $HPA_NAME did not reach max replicas."
            exit 1
          fi

      - name: Setting HPA back to normal
        run: |
          kubectl patch hpa liatrio-hpa-api -n $DEPLOY_ENV --patch-file Tests/hpa_reset.yaml

      - name: Turn ArgoCD On for HPA
        run: |
          kubectl patch application liatrio-argocd-api -n argocd --type merge -p '{
            "spec": {
              "syncPolicy": {
                "automated": {
                  "prune": true,
                  "selfHeal": true
                },
                "syncOptions": [
                  "CreateNamespace=true"
                ]
              }
            }
          }'

          # kubectl scale deployment argocd-server -n argocd --replicas=1
      # - name: Re-enable ArgoCD management of HPA
      #   run: |
      #     kubectl patch application liatrio-argocd-api -n argocd --type json -p='[
      #       {
      #         "op": "remove",
      #         "path": "/spec/ignoreDifferences"
      #       }
      #     ]'

      - name: ⭐ RBAC. Role Based Action Control. Create Service Account, Roles, & Binding
        run: |
          echo "Setting up Service Account: github-actions-sa-user to have get & list for namespaces, pods, services, & deployments"      
          kubectl apply -f ArgoManifest/rbac.yaml
      - name: ⭐ Generate Service Account Token & Test
        run: |
          TOKEN=$(kubectl create token github-actions-sa-user -n github-actions)
          echo "::add-mask::$TOKEN"
          if [ -z "$TOKEN" ]; then
            echo "ERROR: Token generation failed!"
            exit 1
          fi
          echo "Checking Deployments using ServiceAccount"
          echo ""
          echo "Deployments:"
          kubectl --token=$TOKEN get deployment -n $DEPLOY_ENV
          echo ""
          echo "Pods:"
          kubectl --token=$TOKEN get pods -n $DEPLOY_ENV
          echo ""
          echo "Describe Deployment:"
          kubectl --token=$TOKEN describe deployment liatrio-deployment-api -n $DEPLOY_ENV

      - name: ⭐ Auth test
        run: |
          echo "Testing Can-I as the GitHub Service Account User"
          echo ""
          echo "Can list Pods under dev?"
          kubectl auth can-i list pods -n dev --as=system:serviceaccount:github-actions:github-actions-sa-user
          echo "Can list Pods under staging?"
          kubectl auth can-i list pods -n staging --as=system:serviceaccount:github-actions:github-actions-sa-user
          echo "Can list Pods under prod?"
          kubectl auth can-i list pods -n prod --as=system:serviceaccount:github-actions:github-actions-sa-user
          echo ""
          echo "Can list namespaces dev? Note: There will be a warning since namespaces aren't namespace scoped"
          kubectl auth can-i list namespaces -n dev --as=system:serviceaccount:github-actions:github-actions-sa-user
          echo "Can list namespaces staging? Note: There will be a warning since namespaces aren't namespace scoped"
          kubectl auth can-i list namespaces -n staging --as=system:serviceaccount:github-actions:github-actions-sa-user
          echo "Can list namespaces prod? Note: There will be a warning since namespaces aren't namespace scoped"
          kubectl auth can-i list namespaces -n prod --as=system:serviceaccount:github-actions:github-actions-sa-user

      - name: ⭐ Version Control. Change Cause & Deployment Label
        run: |
          echo "Deployment Label:"
          kubectl get deployment liatrio-deployment-api -n $DEPLOY_ENV --show-labels
          echo ""
          echo "Rollout History:"
          kubectl rollout history deployment liatrio-deployment-api -n $DEPLOY_ENV

      - name: ⭐ Patch Rollout
        run: |
          echo "Patching a timestamp to trigger a rollout"
          kubectl patch deployment liatrio-deployment-api -n $DEPLOY_ENV \
           -p "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"rollout-timestamp\":\"trigger-$(date +%s)\"}}}}}"
           echo ""
           echo "Rollout Status"
           kubectl rollout status deployment liatrio-deployment-api -n $DEPLOY_ENV
           echo ""
           echo "Pods:"
           kubectl get pods -n $DEPLOY_ENV
           echo ""
           echo "Change cause to Timestamp"
           kubectl annotate deployment liatrio-deployment-api \
            kubernetes.io/change-cause="Timestamp to trigger a rollout" \
            --overwrite -n $DEPLOY_ENV
           echo "Rollout History:"
           kubectl rollout history deployment liatrio-deployment-api -n $DEPLOY_ENV
      - name: ⭐ Rollback
        run: |
          echo "Rollout History:"
          kubectl rollout history deployment liatrio-deployment-api -n $DEPLOY_ENV
          echo ""
          echo "Rolling back to previous version"
          kubectl rollout undo deployment liatrio-deployment-api -n $DEPLOY_ENV
          echo ""
          echo "Rollout History:"
          kubectl rollout history deployment liatrio-deployment-api -n $DEPLOY_ENV
