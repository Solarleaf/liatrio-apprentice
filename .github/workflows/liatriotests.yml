name: Apprentice GitHub Actions

on:
  push:
    branches:
      - main
      - GitHub
      - Kubernetes
  pull_request:
    branches: [main]

# Prevent Multiple Actions from happening at once on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

env:
  IMAGE_NAME: liatrio-api
  DOCKER_REPO: apptemp/liatrio
  PORT: 80
jobs:
  liatriotests: # Name Required for passing the pull request  checks
    permissions:
      contents: read
      packages: read
    if: github.event_name == 'push' && github.event.pull_request == null
    # build:
    # Runner using version
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    outputs:
      IMAGE_TAG: ${{ steps.expose-image-tag.outputs.IMAGE_TAG }}
    steps:
      # checkout@v4 using Sha 3-13-25
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Build Docker Image
        run: docker build -t $IMAGE_NAME .

      - name: Run Docker
        run: docker run -d -p $PORT:$PORT $IMAGE_NAME

      # liatrio/github-actions/apprentice-action@v1.0.0 3-13-25
      - name: run Liatrio 6 tests
        uses: liatrio/github-actions/apprentice-action@0b41561cca6822cc8d880fe0e49e7807a41fdf91

      - name: Log in to Docker Hub
        # If success just in case an if: failure() is every used
        # Want to make sure that everything worked before starting the upload process
        if: success()
        # uses: docker/login-action@v2 3-13-25
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set Image Tag as Commit Sha
        id: expose-image-tag
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_OUTPUT
      # Creaetes a latest and a time stamped version making manual rollbacks easier if needed
      - name: Tag Docker Image
        if: success()
        run: |
          docker tag $IMAGE_NAME $DOCKER_REPO:latest
          docker tag $IMAGE_NAME $DOCKER_REPO:${IMAGE_TAG}

      - name: Push Docker Image
        if: success()
        run: |
          docker push $DOCKER_REPO:latest
          docker push $DOCKER_REPO:${IMAGE_TAG}
  # Per Best Practices this would be a separate file. To avoid Screen swaps keeping it in same file
  #  on:
  #   workflow_run:
  #     workflows: ["liatriotests"]
  #     types:
  #       - completed

  GCloud:
    # build:
    needs: liatriotests
    env:
      GKE_CLUSTER: cluster-1
      GKE_REGION: us-central1-a
      IMAGE_TAG: ${{ needs.liatriotests.outputs.IMAGE_TAG }}
    # Runner using version
    runs-on: ubuntu-24.04
    timeout-minutes: 6
    # Checks out the Repo code
    permissions:
      contents: read
    steps:
      # checkout@v4 using Sha 3-13-25
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      # - uses: "google-github-actions/auth@v2"
      - uses: "google-github-actions/auth@6fc4af4b145ae7821d527454aa9bd537d1f2dc5f"
        with:
          credentials_json: "${{ secrets.GOGLE_CREDS }}"

      # uses: google-github-actions/setup-gcloud@v2 3-13-25
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@6189d56e4096ee891640bb02ac264be376592d6a

      - name: Check if kubectl is installed
        run: kubectl version --client

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
          echo "export USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> ~/.bashrc
          source ~/.bashrc

      - name: Clusters List
        run: gcloud container clusters list

        # Output used in case this were to be a multi stage
      - name: Check if Cluster Exists
        id: check-cluster
        run: |
          CLUSTER_EXISTS=$(gcloud container clusters list --region $GKE_REGION --filter="name=${GKE_CLUSTER}" --format="value(name)")
          if [[ -z "$CLUSTER_EXISTS" ]]; then
            echo "ERROR: Kubernetes cluster '${GKE_CLUSTER}' not found in region '${GKE_REGION}'"
            echo "CREATE_CLUSTER=false" >> $GITHUB_ENV
            echo "CREATE_CLUSTER=false" >> $GITHUB_OUTPUT
          else
            echo "Cluster '${GKE_CLUSTER}' exists. Proceeding with deployment."
            echo "CREATE_CLUSTER=true" >> $GITHUB_ENV
            echo "CREATE_CLUSTER=true" >> $GITHUB_OUTPUT
          fi

      - name: Deploy Cluster
        if: steps.check-cluster.outputs.CREATE_CLUSTER == 'false'
        run: |
          echo "Creating GKE Cluster from k8s/cluster.txt..."
          # gcloud components install beta --quiet # Install beta # IF needed
          chmod +x k8s/cluster.txt  # Ensure it's executable
          bash k8s/cluster.txt --quiet        # Run the cluster creation command
          echo "Cluster created successfully!"

      - name: Wait for Cluster Readiness
        run: |
          echo "Waiting for cluster to be ready..."
          while [[ $(gcloud container clusters describe ${GKE_CLUSTER} --region ${GKE_REGION} --format="value(status)") != "RUNNING" ]]; do
            echo "Still waiting for cluster '${GKE_CLUSTER}'..."
            sleep 30
          done
          echo "Cluster is now RUNNING."

      - name: Get Kubernetes Credentials
        run: gcloud container clusters get-credentials $GKE_CLUSTER --region $GKE_REGION

      - name: Deploy Container
        run: |
          echo "${IMAGE_TAG}"
          sed -i "s|\(image: docker.io/${DOCKER_REPO}:\)[^[:space:]]*|\1${IMAGE_TAG}|" k8s/deployment.yaml
          cat k8s/deployment.yaml
          kubectl apply -f k8s/deployment.yaml

      - name: Turn them off
        run: |
          sleep 180
          kubectl delete deployment liatrio-deployment-api
          kubectl delete service liatrio-service-api

      # Some of the cloud prerequirements
      # gcloud services enable cloudresourcemanager.googleapis.com
      # gcloud services enable container.googleapis.com
