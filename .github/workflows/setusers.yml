name: RBAC Users

on:
  push:
    branches:
      - "GitHub"
      - "Kubernetes"
      - "Docker"
  pull_request:
    branches: [main]

# on: workflow_dispatch

jobs:
  Rbac:
    env:
      GKE_CLUSTER: cluster-1
      GKE_REGION: us-central1-a
    # Runner using version
    runs-on: ubuntu-24.04
    timeout-minutes: 15
    # Checks out the Repo code
    permissions:
      contents: read
    steps:
      # checkout@v4 using Sha 3-13-25
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
      # - uses: "google-github-actions/auth@v2"
      - uses: "google-github-actions/auth@6fc4af4b145ae7821d527454aa9bd537d1f2dc5f"
        with:
          credentials_json: "${{ secrets.GOGLE_CREDS }}"

      # uses: google-github-actions/setup-gcloud@v2 3-13-25
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@6189d56e4096ee891640bb02ac264be376592d6a

      - name: Check if kubectl is installed
        run: kubectl version --client

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin
          echo "export USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> ~/.bashrc
          source ~/.bashrc

      - name: Clusters List
        run: gcloud container clusters list

        # Output used in case this were to be a multi stage
      - name: Check if Cluster Exists
        id: check-cluster
        run: |
          CLUSTER_EXISTS=$(gcloud container clusters list --region $GKE_REGION --filter="name=${GKE_CLUSTER}" --format="value(name)")
          if [[ -z "$CLUSTER_EXISTS" ]]; then
            echo "ERROR: Kubernetes cluster '${GKE_CLUSTER}' not found in region '${GKE_REGION}'"
            exit 1
          else
            echo "Cluster '${GKE_CLUSTER}' exists. Proceeding with user setup."
          fi

      - name: Get Kubernetes Credentials
        run: gcloud container clusters get-credentials $GKE_CLUSTER --region $GKE_REGION

      - name: Establish Namespaces
        run: |
          kubectl apply -f k8s/namespaces.yaml

      - name: Establish Service Account, Binding, & Role
        run: |
          kubectl apply -f k8s/rbac.yaml

      - name: Generate Service Account Token
        run: |
          TOKEN=$(kubectl create token github-actions-sa-user -n github-actions)
          echo "::add-mask::$TOKEN"
          if [ -z "$TOKEN" ]; then
            echo "ERROR: Token generation failed!"
            exit 1
          fi
          echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token
          gh secret set KUBE_TOKEN --body "$TOKEN"
          # echo "KUBE_TOKEN=$TOKEN" >> $GITHUB_ENV

      - name: Auth test
        run: |
          kubectl auth can-i list pods -n dev --as=system:serviceaccount:github-actions:github-actions-sa-user
          kubectl auth can-i list pods -n staging --as=system:serviceaccount:github-actions:github-actions-sa-user
          kubectl auth can-i list pods -n prod --as=system:serviceaccount:github-actions:github-actions-sa-user
